function prepareFig(size, opt)
% prepareFig v7.0 by Florian Pfaff pfaff@kit.edu
arguments
    % size: Set the target size of the plot.
    size (1, 2) double {mustBePositive} = [8, 5]
    % Scaling of the plot. This can help, e.g., to prevent
    % large legend boxes.
    opt.scaling (1, 1) double {mustBePositive} = 2
    % Set the size of the font used.
    opt.fontSize (1, 1) double {mustBePositive} = 7
    % Can change the size of the tick labels independently. If empty, will
    % will default to fontSize.
    opt.fontSizeTickLabels double = []
    % Set the width of the lines of the plot.
    opt.lineWidth (1, 1) double {mustBePositive} = 0.6
    % Can change the width of grid and box lines independently. If empty,
    % will default to lineWidth.
    opt.lineWidthBoxAndGrid double = []
    % Choose whether text (axis labels, tick labels, legends)
    % should be rendered using LaTeX
    opt.useLaTeX (1, 1) logical = true
    % Logical with up to three entries
    % Choose if math mode should be invoked for axis labels. If only
    % one logical is given, math mode is enabled/disabled for all axes.
    opt.useMathAxis (:, 1) logical = false
    % Font to use (only relevant if LaTeX is not used)
    opt.fontName char = 'Times'
    % Make background transparent (exporters usually have an option for
    % that so it is normally not required)
    opt.transparentBackground (1, 1) logical = false
    % Enable box around plot
    opt.enableBox (1, 1) logical = true
    % Enable box around plot
    opt.enableGrid (1, 1) logical = false
    % Make axes labels bold
    opt.axesLabelsBold (1, 1) logical = false
    % Make legend text bold
    opt.legendTextBold (1, 1) logical = false
end
% Changelog (YYYY-MM-DD)
% 7.0 2021-10-06 Can now choose to plot box and grid. Can make axes labels
% and legend text bold. Can now vary line width for the box around the plot
% and the grid separate from the width of the line in the main part of the
% plot. Can also change font size of tick labels independently. Also added
% option to set background to transparent.
% 6.1 2021-09-17 Now also scaling lines for quiver and scatter
% 6.0 2021-04-18 Use named arguments
% 5.1 2020-03-24 Added check if axes object exists
% 5.0 2019-11-16 Now using arguments block of Matlab
% 4.8 2018-11-24 Papersize is set first. This prevents a messup of the
% tick labels if the number of tick labels changes afterward.
% 4.7 Remove AxesToolbars (for 2018b and later)
% 4.6 Fixed bug introduced in previous change
% 4.5 Strings modified directly via .XLabel.String etc.
% 4.4 Font name change possible
% 4.3 Also handles lines generated by fplot
% 4.2 Correctly handle tick labels with 10^{x}
% 4.1 Shift by 10 units on screen
% 4.0 Adding $ $ to tick labels when real numbers or \pi is found.
% 3.1 Allow disabling LaTeX
scaling = opt.scaling; fontSize = opt.fontSize; lineWidth = opt.lineWidth;
useLaTeX = opt.useLaTeX; useMathAxis = opt.useMathAxis; fontName=opt.fontName;
paperSize = size * scaling;
if isempty(opt.lineWidthBoxAndGrid)
    opt.lineWidthBoxAndGrid = opt.lineWidth;
end
if isempty(opt.fontSizeTickLabels)
    opt.fontSizeTickLabels = fontSize;
end
if scaling < 0.1 || scaling > 10 || fontSize < 3 && fontSize > 20 || lineWidth < 0.1 || lineWidth > 3
    warning('Parameters do not seem to be reasonable.')
end
assert(opt.useLaTeX || ~(opt.axesLabelsBold||opt.legendTextBold),'Bold font currently only supported in latex mode.')
if opt.transparentBackground
    argumentForTransparency = {'Color', 'None'};
else
    argumentForTransparency = {};
end
set(gcf, ...
    argumentForTransparency{:}, ...
    'InvertHardCopy', 'Off', ...
    'Units', 'centimeters', ...
    'Position', [10, 0, paperSize(1), paperSize(2)], ...
    'PaperPositionMode', 'manual', ...
    'PaperUnits', 'centimeters', ...
    'PaperSize', paperSize, ...
    'PaperPosition', [0, 0, paperSize]);

switch numel(useMathAxis)
    case 1
        useMathXAxis = useMathAxis;
        useMathYAxis = useMathAxis;
        useMathZAxis = useMathAxis;
    case 2
        useMathXAxis = useMathAxis(1);
        useMathYAxis = useMathAxis(2);
        useMathZAxis = false;
    case 3
        useMathXAxis = useMathAxis(1);
        useMathYAxis = useMathAxis(2);
        useMathZAxis = useMathAxis(3);
end
delete(findall(gcf, 'Type', 'AxesToolbar')); % Remove all AxesToolbars (for Matlab 2018b and later)
allAxes = findall(gcf, 'Type', 'Axes');
assert(~isempty(allAxes), 'No axes object found. This function currently only supports figures with at least one axes object.');
if opt.enableBox
    box('on');
end
if opt.enableGrid
    grid('on');
end
set(allAxes, 'LineWidth', opt.lineWidthBoxAndGrid*scaling);
set([findall(allAxes, 'type', 'Line'); findall(allAxes, 'type', 'FunctionLine'); findall(allAxes,'type','quiver'); findall(allAxes,'type','scatter')], 'LineWidth', lineWidth*scaling);
set(allAxes, 'Color', 'none'); % Otherwise, axis will not be transparent, only figure background

set(allAxes, 'FontSize', opt.fontSizeTickLabels*scaling);
allText = findall(gca, 'Type', 'Text');
set(allText, 'FontSize', fontSize*scaling);
delete(title('')); % Set title blank and delete object (so it won't turn up as additional text field)
    function addMathModeToHandle(h)
        if ~contains(h.String, '$')
            h.String = ['$', h.String, '$'];
        end
    end
    function outputStr = addBoldToString(inputStr)
        if contains(inputStr, '$')
            outputStr = ['\boldmath ', inputStr];
        else
            outputStr = ['\bf ', inputStr];
        end
    end
    function addBoldToHandle(h)
        warnStatustmp = warning('off'); % For some unknown reason, Matlab claims that strings are invalid. Ignore this warning since they look fine.
        h.String = addBoldToString(h.String);
        warning(warnStatustmp);
    end
if useLaTeX
    if ~isempty(allAxes(1).XLabel.String) && useMathXAxis
        addMathModeToHandle(allAxes(1).XLabel);
    end
    if ~isempty(allAxes(1).YLabel.String) && useMathYAxis
        addMathModeToHandle(allAxes(1).YLabel);
    end
    if ~isempty(allAxes(1).ZLabel.String) && useMathZAxis
        addMathModeToHandle(allAxes(1).ZLabel);
    end
    if ~isempty(allAxes(1).XLabel.String) && opt.axesLabelsBold
        addBoldToHandle(allAxes(1).XLabel);
    end
    if ~isempty(allAxes(1).YLabel.String) && opt.axesLabelsBold
        addBoldToHandle(allAxes(1).YLabel);
    end
    if ~isempty(allAxes(1).ZLabel.String) && opt.axesLabelsBold
        addBoldToHandle(allAxes(1).ZLabel);
    end
    if opt.legendTextBold
        leg = legend();
        warnStatus = warning('off'); % For some unknown reason, Matlab claims that strings are invalid. Ignore this warning since they look fine.
        legStrings = legend().String;
        for i=1:numel(legStrings)
            legStrings{i} = addBoldToString(legStrings{i});
        end
        leg.String = legStrings;
        warning(warnStatus);
    end
    tickLabels = {allAxes(1).XTickLabel, allAxes(1).YTickLabel, allAxes(1).ZTickLabel};
    for i = 1:numel(tickLabels)
        for j = 1:numel(tickLabels{i})
            % If is number or includes pi, add $ (only if not yet
            % included)
            if (~isnan(str2double(tickLabels{i}{j})) || contains(tickLabels{i}{j}, '\pi') || contains(tickLabels{i}{j}, '10^{')) && ~contains(tickLabels{i}{j}, '$')
                tickLabels{i}{j} = ['$', tickLabels{i}{j}, '$'];
            end
        end
    end
    allAxes(1).XTickLabel = tickLabels{1};
    allAxes(1).YTickLabel = tickLabels{2};
    allAxes(1).ZTickLabel = tickLabels{3};
    set(allAxes, 'ticklabelinterpreter', 'latex');
    set(findobj(gcf, 'type', 'legend'), 'Interpreter', 'latex', 'FontSize', fontSize*scaling);
    set(allText(isvalid(allText)), 'interpreter', 'latex');
else
    set(findall(gcf, 'Type', 'Axes'), 'FontName', fontName);
    set(allText(isvalid(allText)), 'FontName', fontName);
end
end